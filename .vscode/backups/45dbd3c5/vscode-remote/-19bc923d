vscode-remote://vscode-01jzaze4hzn6sscj02462jvhh6.studio.lightning.ai/teamspace/studios/this_studio/cifar10_u_script.ipynb {"mtime":1756830238615,"ctime":1756828404191,"size":111098,"etag":"3eofd4egk3mip","orphaned":false,"typeId":"notebook/jupyter-notebook/jupyter-notebook"}
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Train the base model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "module=cifar10_u name=cifar10 dname=original checkpoint_to_continue= num_timesteps=1024 num_iters=128 batch_size=128 lr=5e-05 scheduler=StrategyConstantLR diffusion=GaussianDiffusionDefault log_interval=15 ckpt_interval=30 num_workers=4 k=1 num_steps=100000\n",
      "Training new model...\n",
      "Training...\n",
      "  0%|                                                | 0/100000 [00:02<?, ?it/s]\n",
      "Traceback (most recent call last):\n",
      "  File \"/teamspace/studios/this_studio/./train.py\", line 103, in <module>\n",
      "    train_model(args, make_model, make_dataset)\n",
      "  File \"/teamspace/studios/this_studio/./train.py\", line 93, in train_model\n",
      "    diffusion_train.train( teacher_diffusion, teacher_ema, args.lr, device,args ,make_dataset,  make_extra_args=make_condition, on_iter=on_iter)\n",
      "  File \"/teamspace/studios/this_studio/train_utils.py\", line 167, in train\n",
      "    loss = diffusion.p_loss(img, time, extra_args)\n",
      "  File \"/teamspace/studios/this_studio/diffusion.py\", line 108, in p_loss\n",
      "    eps_pred = self.inference(z.float(), t.float(), extra_args)\n",
      "  File \"/teamspace/studios/this_studio/diffusion.py\", line 99, in inference\n",
      "    return self.net_(x, t * self.time_scale, **extra_args)\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1751, in _wrapped_call_impl\n",
      "    return self._call_impl(*args, **kwargs)\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1762, in _call_impl\n",
      "    return forward_call(*args, **kwargs)\n",
      "  File \"/teamspace/studios/this_studio/Unets/unet_torch.py\", line 393, in forward\n",
      "    h = block(h, emb)\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1751, in _wrapped_call_impl\n",
      "    return self._call_impl(*args, **kwargs)\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1762, in _call_impl\n",
      "    return forward_call(*args, **kwargs)\n",
      "  File \"/teamspace/studios/this_studio/Unets/unet_torch.py\", line 119, in forward\n",
      "    return x + h\n",
      "torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 0 has a total capacity of 21.96 GiB of which 20.00 MiB is free. Process 15188 has 14.20 GiB memory in use. Process 36248 has 7.73 GiB memory in use. Of the allocated memory 7.28 GiB is allocated by PyTorch, and 239.98 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)\n"
     ]
    }
   ],
   "source": [
    "#!python ./train.py --module cifar10_u --name cifar10 --num_timesteps 1024 --dname original --batch_size 128 --num_workers 4 --num_iters 128 --num_steps 100000\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Model distillation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Distillate to 512 steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "module=cifar10_u name=cifar10 dname=base_0 base_checkpoint=./checkpoints/cifar10/original/checkpoint.pt gamma=0 checkpoint_to_continue= num_timesteps=1024 num_iters=128 batch_size=128 lr=5e-05 scheduler=StrategyLinearLR diffusion=GaussianDiffusionDefault log_interval=5 ckpt_interval=30 num_workers=4 k=2 num_steps=10\n",
      "Num timesteps: 1024, time scale: 1.\n",
      "Teacher parameters copied.\n",
      "Distillation...\n",
      "Loss: 0.006725063174962997: 100%|███████████████| 10/10 [00:26<00:00,  2.70s/it]\n",
      "Saved.\n",
      "^C\n",
      "Traceback (most recent call last):\n",
      "  File \"/teamspace/studios/this_studio/./distillate.py\", line 190, in <module>\n",
      "    distill_model(args, make_model, make_dataset)\n",
      "  File \"/teamspace/studios/this_studio/./distillate.py\", line 179, in distill_model\n",
      "    distillation_model.train_student_debug(make_dataset,args, teacher_ema_diffusion, student_diffusion, student_ema, args.lr, device, make_extra_args=make_condition, on_iter=on_iter)\n",
      "  File \"/teamspace/studios/this_studio/train_utils.py\", line 225, in train_student_debug\n",
      "    on_iter(N, loss.item(), last=True)\n",
      "  File \"/teamspace/studios/this_studio/train_utils.py\", line 111, in iter_callback\n",
      "    tensorboard.add_image(\"visualization\", images_, global_step=N, dataformats='HWC')\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/utils/tensorboard/writer.py\", line 625, in add_image\n",
      "    image(tag, img_tensor, dataformats=dataformats), global_step, walltime\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/utils/tensorboard/summary.py\", line 577, in image\n",
      "    image = make_image(tensor, rescale=rescale)\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/utils/tensorboard/summary.py\", line 622, in make_image\n",
      "    image = Image.fromarray(tensor)\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/PIL/Image.py\", line 3336, in fromarray\n",
      "    return frombuffer(mode, size, obj, \"raw\", rawmode, 0, 1)\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/PIL/Image.py\", line 3225, in frombuffer\n",
      "    return frombytes(mode, size, data, decoder_name, args)\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/PIL/Image.py\", line 3162, in frombytes\n",
      "    im.frombytes(data, decoder_name, decoder_args)\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/PIL/Image.py\", line 875, in frombytes\n",
      "    s = d.decode(data)\n",
      "KeyboardInterrupt\n"
     ]
    }
   ],
   "source": [
    "!python ./distillate.py --module cifar10_u --diffusion GaussianDiffusionDefault --name cifar10 --dname base_0 --base_checkpoint ./checkpoints/cifar10/original/checkpoint.pt --batch_size 128 --num_workers 4 --num_iters 128 --num_steps 10 --log_interval 5 --k 2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "## Distillate to 256 steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "module=cifar10_u name=cifar10 dname=base_1 base_checkpoint=./checkpoints/cifar10/base_0/checkpoint.pt gamma=0 checkpoint_to_continue= num_timesteps=1024 num_iters=10000 batch_size=128 lr=5e-05 scheduler=StrategyLinearLR diffusion=GaussianDiffusionDefault log_interval=5 ckpt_interval=30 num_workers=4 k=3 num_steps=1000\n",
      "Traceback (most recent call last):\n",
      "  File \"/teamspace/studios/this_studio/./distillate.py\", line 190, in <module>\n",
      "    distill_model(args, make_model, make_dataset)\n",
      "  File \"/teamspace/studios/this_studio/./distillate.py\", line 121, in distill_model\n",
      "    teacher_ema.load_state_dict(ckpt[\"G\"])\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 2593, in load_state_dict\n",
      "    raise RuntimeError(\n",
      "RuntimeError: Error(s) in loading state_dict for UNet:\n",
      "\tsize mismatch for conv_out.weight: copying a param with shape torch.Size([6, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([3, 256, 3, 3]).\n",
      "\tsize mismatch for conv_out.bias: copying a param with shape torch.Size([6]) from checkpoint, the shape in current model is torch.Size([3]).\n"
     ]
    }
   ],
   "source": [
    "!python ./distillate.py --module cifar10_u --diffusion GaussianDiffusionDefault --name cifar10 --dname base_1 --base_checkpoint ./checkpoints/cifar10/base_0/checkpoint.pt --batch_size 128 --num_workers 4 --num_iters 10000 --log_interval 5 --k 3 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "## Distillate to 128 steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "module=cifar10_u name=cifar10 dname=base_2 base_checkpoint=./checkpoints/cifar10/base_1/checkpoint.pt gamma=0 checkpoint_to_continue= num_timesteps=1024 num_iters=50 batch_size=1 lr=5e-05 scheduler=StrategyLinearLR diffusion=GaussianDiffusionDefault log_interval=5 ckpt_interval=30 num_workers=4 k=3\n",
      "Num timesteps: 113, time scale: 9.\n",
      "Teacher parameters copied.\n",
      "Distillation...\n",
      "Loss: 0.00012528953228638592: 100%|█████████████| 50/50 [00:14<00:00,  3.56it/s]\n",
      "Saved.\n",
      "Finished.\n"
     ]
    }
   ],
   "source": [
    "!python ./distillate.py --module cifar10_u --diffusion GaussianDiffusionDefault --name cifar10 --dname base_2 --base_checkpoint ./checkpoints/cifar10/base_1/checkpoint.pt --batch_size 1 --num_workers 4 --num_iters 50 --log_interval 5 --k 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "## Distillate to 64 steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "module=cifar10_u name=cifar10 dname=base_3 base_checkpoint=./checkpoints/cifar10/base_2/checkpoint.pt gamma=0 checkpoint_to_continue= num_timesteps=1024 num_iters=50 batch_size=1 lr=5e-05 scheduler=StrategyLinearLR diffusion=GaussianDiffusionDefault log_interval=5 ckpt_interval=30 num_workers=4 k=3\n",
      "Num timesteps: 37, time scale: 27.\n",
      "Teacher parameters copied.\n",
      "Distillation...\n",
      "Loss: 7.873918906042832e-05: 100%|██████████████| 50/50 [00:13<00:00,  3.58it/s]\n",
      "Saved.\n",
      "Finished.\n"
     ]
    }
   ],
   "source": [
    "!python ./distillate.py --module cifar10_u --diffusion GaussianDiffusionDefault --name cifar10 --dname base_3 --base_checkpoint ./checkpoints/cifar10/base_2/checkpoint.pt --batch_size 1 --num_workers 4 --num_iters 50 --log_interval 5 --k 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "## Distillate to 32 steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!python ./distillate.py --module cifar10_u --diffusion GaussianDiffusionDefault --name cifar10 --dname base_4 --base_checkpoint ./checkpoints/cifar10/base_3/checkpoint.pt --batch_size 1 --num_workers 4 --num_iters 10000 --log_interval 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "## Distillate to 16 steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!python ./distillate.py --module cifar10_u --diffusion GaussianDiffusionDefault --name cifar10 --dname base_5 --base_checkpoint ./checkpoints/cifar10/base_4/checkpoint.pt --batch_size 1 --num_workers 4 --num_iters 10000 --log_interval 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "## Distillate to 8 steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "pycharm": {
     "is_executing": true,
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "!python ./distillate.py --module cifar10_u --diffusion GaussianDiffusionDefault --name cifar10 --dname base_6 --base_checkpoint ./checkpoints/cifar10/base_5/checkpoint.pt --batch_size 1 --num_workers 4 --num_iters 10000 --log_interval 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Image generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the timestepts are 10 and 1\n",
      "Model loaded.\n",
      "calling my ahh\n",
      "10it [00:00, 11.30it/s]\n",
      "/pytorch/aten/src/ATen/native/cuda/ScatterGatherKernel.cu:144: operator(): block: [0,0,0], thread: [0,0,0] Assertion `idx_dim >= 0 && idx_dim < index_size && \"index out of bounds\"` failed.\n",
      "Traceback (most recent call last):\n",
      "  File \"/teamspace/studios/this_studio/./sample.py\", line 203, in <module>\n",
      "    sample_images(args, make_model)\n",
      "  File \"/teamspace/studios/this_studio/./sample.py\", line 189, in sample_images\n",
      "    img = make_visualization(teacher_diffusion, device, image_size, need_tqdm=True, eta=args.eta, clip_value=args.clipping_value)\n",
      "  File \"/teamspace/studios/this_studio/train_utils.py\", line 83, in make_visualization\n",
      "    images_ = images_.permute(1, 2, 0).cpu().numpy()  # (H, W, C)\n",
      "RuntimeError: CUDA error: device-side assert triggered\n",
      "CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\n",
      "For debugging consider passing CUDA_LAUNCH_BLOCKING=1\n",
      "Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!python ./sample.py --out_file ./images/cifar10_u_teacher_5.png --module cifar10_u --checkpoint ./checkpoints/cifar10/original/checkpoint.pt --batch_size 1 --time_scale 100\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model loaded.\n",
      "0it [00:00, ?it/s]torch.Size([1, 3, 32, 32])\n",
      "1it [00:00,  1.61it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "5it [00:00,  8.55it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "9it [00:00, 14.66it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "13it [00:00, 19.61it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "17it [00:01, 23.60it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "21it [00:01, 26.66it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "25it [00:01, 28.70it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "29it [00:01, 30.21it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "33it [00:01, 30.92it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "37it [00:01, 32.00it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "41it [00:01, 32.68it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "45it [00:01, 33.21it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "49it [00:02, 33.08it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "53it [00:02, 32.85it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "57it [00:02, 31.97it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "61it [00:02, 32.77it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "65it [00:02, 32.92it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "69it [00:02, 32.77it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "73it [00:02, 32.95it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "77it [00:02, 33.39it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "81it [00:02, 33.10it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "85it [00:03, 32.41it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "89it [00:03, 32.66it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "93it [00:03, 32.76it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "97it [00:03, 32.79it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "101it [00:03, 33.11it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "105it [00:03, 33.43it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "109it [00:03, 33.71it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "113it [00:03, 33.64it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "117it [00:04, 34.06it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "121it [00:04, 34.33it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "125it [00:04, 34.15it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "129it [00:04, 34.43it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "133it [00:04, 34.29it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "137it [00:04, 34.53it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "141it [00:04, 34.31it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "145it [00:04, 34.49it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "149it [00:05, 34.04it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "153it [00:05, 34.31it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "157it [00:05, 34.66it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "161it [00:05, 34.65it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "165it [00:05, 34.63it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "169it [00:05, 34.56it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "173it [00:05, 34.37it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "177it [00:05, 33.82it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "181it [00:05, 32.62it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "185it [00:06, 32.55it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "189it [00:06, 32.12it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "193it [00:06, 31.28it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "197it [00:06, 31.74it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "201it [00:06, 31.76it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "205it [00:06, 32.00it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "209it [00:06, 32.34it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "213it [00:06, 31.98it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "217it [00:07, 32.59it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "221it [00:07, 33.09it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "225it [00:07, 33.38it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "229it [00:07, 33.59it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "233it [00:07, 33.20it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "237it [00:07, 33.51it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "241it [00:07, 33.79it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "245it [00:07, 33.71it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "249it [00:08, 33.12it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "253it [00:08, 32.79it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "257it [00:08, 32.71it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "261it [00:08, 33.03it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "265it [00:08, 33.17it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "269it [00:08, 33.48it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "273it [00:08, 33.91it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "277it [00:08, 34.26it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "281it [00:08, 34.00it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "285it [00:09, 34.30it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "289it [00:09, 33.66it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "293it [00:09, 33.21it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "297it [00:09, 33.07it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "301it [00:09, 33.12it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "305it [00:09, 33.42it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "309it [00:09, 33.56it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "313it [00:09, 33.14it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "317it [00:10, 32.35it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "321it [00:10, 33.12it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "325it [00:10, 33.50it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "329it [00:10, 33.14it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "333it [00:10, 33.08it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "337it [00:10, 32.68it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "341it [00:10, 33.20it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "345it [00:10, 32.78it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "349it [00:11, 31.11it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "353it [00:11, 31.32it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "357it [00:11, 31.52it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "361it [00:11, 31.52it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "365it [00:11, 31.72it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "369it [00:11, 32.20it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "373it [00:11, 32.79it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "377it [00:11, 32.68it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "381it [00:12, 33.09it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "385it [00:12, 32.86it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "389it [00:12, 33.04it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "393it [00:12, 32.43it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "397it [00:12, 32.32it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "401it [00:12, 32.51it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "405it [00:12, 33.00it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "409it [00:12, 33.21it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "413it [00:13, 32.89it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "417it [00:13, 33.21it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "421it [00:13, 33.08it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "425it [00:13, 33.21it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "429it [00:13, 33.15it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "433it [00:13, 32.88it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "437it [00:13, 32.73it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "441it [00:13, 32.27it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "445it [00:13, 32.47it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "449it [00:14, 32.73it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "453it [00:14, 33.03it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "457it [00:14, 33.40it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "461it [00:14, 31.07it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "465it [00:14, 31.41it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "469it [00:14, 32.15it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "473it [00:14, 32.71it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "477it [00:14, 32.75it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "481it [00:15, 32.23it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "485it [00:15, 32.54it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "489it [00:15, 32.52it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "493it [00:15, 32.59it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "497it [00:15, 33.14it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "501it [00:15, 33.33it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "505it [00:15, 33.58it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "509it [00:15, 33.35it/s]torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "torch.Size([1, 3, 32, 32])\n",
      "512it [00:16, 31.92it/s]\n",
      "Finished.\n"
     ]
    }
   ],
   "source": [
    "!python ./sample.py --out_file ./images/cifar10_u_6_clipped.png --module cifar10_u --checkpoint ./checkpoints/cifar10/base_0/checkpoint.pt --batch_size 1 --clipped_sampling True --clipping_value 1.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model loaded.\n",
      "0it [00:00, ?it/s]torch.Size([128, 3, 32, 32])\n",
      "1it [00:00,  1.11it/s]torch.Size([128, 3, 32, 32])\n",
      "torch.Size([128, 3, 32, 32])\n",
      "3it [00:01,  2.81it/s]torch.Size([128, 3, 32, 32])\n",
      "4it [00:01,  3.09it/s]torch.Size([128, 3, 32, 32])\n",
      "5it [00:01,  3.28it/s]torch.Size([128, 3, 32, 32])\n",
      "6it [00:02,  3.40it/s]torch.Size([128, 3, 32, 32])\n",
      "7it [00:02,  3.50it/s]torch.Size([128, 3, 32, 32])\n",
      "8it [00:02,  3.57it/s]torch.Size([128, 3, 32, 32])\n",
      "9it [00:02,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "10it [00:03,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "11it [00:03,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "12it [00:03,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "13it [00:03,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "14it [00:04,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "15it [00:04,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "16it [00:04,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "17it [00:04,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "18it [00:05,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "19it [00:05,  3.73it/s]torch.Size([128, 3, 32, 32])\n",
      "20it [00:05,  3.74it/s]torch.Size([128, 3, 32, 32])\n",
      "21it [00:06,  3.73it/s]torch.Size([128, 3, 32, 32])\n",
      "22it [00:06,  3.73it/s]torch.Size([128, 3, 32, 32])\n",
      "23it [00:06,  3.73it/s]torch.Size([128, 3, 32, 32])\n",
      "24it [00:06,  3.74it/s]torch.Size([128, 3, 32, 32])\n",
      "25it [00:07,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "26it [00:07,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "27it [00:07,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "28it [00:07,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "29it [00:08,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "30it [00:08,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "31it [00:08,  3.73it/s]torch.Size([128, 3, 32, 32])\n",
      "32it [00:09,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "33it [00:09,  3.73it/s]torch.Size([128, 3, 32, 32])\n",
      "34it [00:09,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "35it [00:09,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "36it [00:10,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "37it [00:10,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "38it [00:10,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "39it [00:10,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "40it [00:11,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "41it [00:11,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "42it [00:11,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "43it [00:11,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "44it [00:12,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "45it [00:12,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "46it [00:12,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "47it [00:13,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "48it [00:13,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "49it [00:13,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "50it [00:13,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "51it [00:14,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "52it [00:14,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "53it [00:14,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "54it [00:14,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "55it [00:15,  3.72it/s]torch.Size([128, 3, 32, 32])\n",
      "56it [00:15,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "57it [00:15,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "58it [00:16,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "59it [00:16,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "60it [00:16,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "61it [00:16,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "62it [00:17,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "63it [00:17,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "64it [00:17,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "65it [00:17,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "66it [00:18,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "67it [00:18,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "68it [00:18,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "69it [00:18,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "70it [00:19,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "71it [00:19,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "72it [00:19,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "73it [00:20,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "74it [00:20,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "75it [00:20,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "76it [00:20,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "77it [00:21,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "78it [00:21,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "79it [00:21,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "80it [00:21,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "81it [00:22,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "82it [00:22,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "83it [00:22,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "84it [00:23,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "85it [00:23,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "86it [00:23,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "87it [00:23,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "88it [00:24,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "89it [00:24,  3.71it/s]torch.Size([128, 3, 32, 32])\n",
      "90it [00:24,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "91it [00:24,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "92it [00:25,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "93it [00:25,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "94it [00:25,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "95it [00:25,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "96it [00:26,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "97it [00:26,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "98it [00:26,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "99it [00:27,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "100it [00:27,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "101it [00:27,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "102it [00:27,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "103it [00:28,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "104it [00:28,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "105it [00:28,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "106it [00:28,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "107it [00:29,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "108it [00:29,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "109it [00:29,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "110it [00:30,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "111it [00:30,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "112it [00:30,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "113it [00:30,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "114it [00:31,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "115it [00:31,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "116it [00:31,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "117it [00:31,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "118it [00:32,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "119it [00:32,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "120it [00:32,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "121it [00:33,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "122it [00:33,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "123it [00:33,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "124it [00:33,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "125it [00:34,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "126it [00:34,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "127it [00:34,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "128it [00:34,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "129it [00:35,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "130it [00:35,  3.70it/s]torch.Size([128, 3, 32, 32])\n",
      "131it [00:35,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "132it [00:36,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "133it [00:36,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "134it [00:36,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "135it [00:36,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "136it [00:37,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "137it [00:37,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "138it [00:37,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "139it [00:37,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "140it [00:38,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "141it [00:38,  3.69it/s]torch.Size([128, 3, 32, 32])\n",
      "142it [00:38,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "143it [00:39,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "144it [00:39,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "145it [00:39,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "146it [00:39,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "147it [00:40,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "148it [00:40,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "149it [00:40,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "150it [00:40,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "151it [00:41,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "152it [00:41,  3.68it/s]torch.Size([128, 3, 32, 32])\n",
      "153it [00:41,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "154it [00:42,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "155it [00:42,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "156it [00:42,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "157it [00:42,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "158it [00:43,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "159it [00:43,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "160it [00:43,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "161it [00:43,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "162it [00:44,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "163it [00:44,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "164it [00:44,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "165it [00:45,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "166it [00:45,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "167it [00:45,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "168it [00:45,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "169it [00:46,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "170it [00:46,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "171it [00:46,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "172it [00:46,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "173it [00:47,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "174it [00:47,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "175it [00:47,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "176it [00:48,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "177it [00:48,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "178it [00:48,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "179it [00:48,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "180it [00:49,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "181it [00:49,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "182it [00:49,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "183it [00:49,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "184it [00:50,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "185it [00:50,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "186it [00:50,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "187it [00:51,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "188it [00:51,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "189it [00:51,  3.67it/s]torch.Size([128, 3, 32, 32])\n",
      "190it [00:51,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "191it [00:52,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "192it [00:52,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "193it [00:52,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "194it [00:52,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "195it [00:53,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "196it [00:53,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "197it [00:53,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "198it [00:54,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "199it [00:54,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "200it [00:54,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "201it [00:54,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "202it [00:55,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "203it [00:55,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "204it [00:55,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "205it [00:55,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "206it [00:56,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "207it [00:56,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "208it [00:56,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "209it [00:57,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "210it [00:57,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "211it [00:57,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "212it [00:57,  3.66it/s]torch.Size([128, 3, 32, 32])\n",
      "213it [00:58,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "214it [00:58,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "215it [00:58,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "216it [00:58,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "217it [00:59,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "218it [00:59,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "219it [00:59,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "220it [01:00,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "221it [01:00,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "222it [01:00,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "223it [01:00,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "224it [01:01,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "225it [01:01,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "226it [01:01,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "227it [01:01,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "228it [01:02,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "229it [01:02,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "230it [01:02,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "231it [01:03,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "232it [01:03,  3.65it/s]torch.Size([128, 3, 32, 32])\n",
      "233it [01:03,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "234it [01:03,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "235it [01:04,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "236it [01:04,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "237it [01:04,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "238it [01:05,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "239it [01:05,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "240it [01:05,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "241it [01:05,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "242it [01:06,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "243it [01:06,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "244it [01:06,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "245it [01:06,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "246it [01:07,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "247it [01:07,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "248it [01:07,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "249it [01:08,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "250it [01:08,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "251it [01:08,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "252it [01:08,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "253it [01:09,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "254it [01:09,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "255it [01:09,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "256it [01:09,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "257it [01:10,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "258it [01:10,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "259it [01:10,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "260it [01:11,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "261it [01:11,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "262it [01:11,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "263it [01:11,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "264it [01:12,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "265it [01:12,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "266it [01:12,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "267it [01:12,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "268it [01:13,  3.64it/s]torch.Size([128, 3, 32, 32])\n",
      "269it [01:13,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "270it [01:13,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "271it [01:14,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "272it [01:14,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "273it [01:14,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "274it [01:14,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "275it [01:15,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "276it [01:15,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "277it [01:15,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "278it [01:16,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "279it [01:16,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "280it [01:16,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "281it [01:16,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "282it [01:17,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "283it [01:17,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "284it [01:17,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "285it [01:17,  3.63it/s]torch.Size([128, 3, 32, 32])\n",
      "286it [01:18,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "287it [01:18,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "288it [01:18,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "289it [01:19,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "290it [01:19,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "291it [01:19,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "292it [01:19,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "293it [01:20,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "294it [01:20,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "295it [01:20,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "296it [01:21,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "297it [01:21,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "298it [01:21,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "299it [01:21,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "300it [01:22,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "301it [01:22,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "302it [01:22,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "303it [01:22,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "304it [01:23,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "305it [01:23,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "306it [01:23,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "307it [01:24,  3.62it/s]torch.Size([128, 3, 32, 32])\n",
      "308it [01:24,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "309it [01:24,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "310it [01:24,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "311it [01:25,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "312it [01:25,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "313it [01:25,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "314it [01:26,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "315it [01:26,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "316it [01:26,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "317it [01:26,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "318it [01:27,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "319it [01:27,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "320it [01:27,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "321it [01:27,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "322it [01:28,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "323it [01:28,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "324it [01:28,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "325it [01:29,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "326it [01:29,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "327it [01:29,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "328it [01:29,  3.61it/s]torch.Size([128, 3, 32, 32])\n",
      "329it [01:30,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "330it [01:30,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "331it [01:30,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "332it [01:31,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "333it [01:31,  3.58it/s]torch.Size([128, 3, 32, 32])\n",
      "334it [01:31,  3.58it/s]torch.Size([128, 3, 32, 32])\n",
      "335it [01:31,  3.58it/s]torch.Size([128, 3, 32, 32])\n",
      "336it [01:32,  3.58it/s]torch.Size([128, 3, 32, 32])\n",
      "337it [01:32,  3.58it/s]torch.Size([128, 3, 32, 32])\n",
      "338it [01:32,  3.58it/s]torch.Size([128, 3, 32, 32])\n",
      "339it [01:32,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "340it [01:33,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "341it [01:33,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "342it [01:33,  3.58it/s]torch.Size([128, 3, 32, 32])\n",
      "343it [01:34,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "344it [01:34,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "345it [01:34,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "346it [01:34,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "347it [01:35,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "348it [01:35,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "349it [01:35,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "350it [01:36,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "351it [01:36,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "352it [01:36,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "353it [01:36,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "354it [01:37,  3.59it/s]torch.Size([128, 3, 32, 32])\n",
      "355it [01:37,  3.60it/s]torch.Size([128, 3, 32, 32])\n",
      "356it [01:37,  3.61it/s]^C\n",
      "356it [01:37,  3.64it/s]\n",
      "Traceback (most recent call last):\n",
      "  File \"/teamspace/studios/this_studio/./sample.py\", line 201, in <module>\n",
      "    sample_images(args, make_model)\n",
      "  File \"/teamspace/studios/this_studio/./sample.py\", line 187, in sample_images\n",
      "    img = make_visualization(teacher_diffusion, device, image_size, need_tqdm=True, eta=args.eta, clip_value=args.clipping_value)\n",
      "  File \"/teamspace/studios/this_studio/train_utils.py\", line 82, in make_visualization\n",
      "    images_ = make_visualization_(diffusion, device, image_size, need_tqdm=need_tqdm, eta=eta, clip_value=clip_value)\n",
      "  File \"/teamspace/studios/this_studio/train_utils.py\", line 72, in make_visualization_\n",
      "    imgs = p_sample_loop(diffusion, noise, extra_args, device, samples_to_capture=1024,#5\n",
      "  File \"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n",
      "    return func(*args, **kwargs)\n",
      "  File \"/teamspace/studios/this_studio/train_utils.py\", line 48, in p_sample_loop\n",
      "    torch.full((img.shape[0],), i, dtype=torch.int64).to(device),\n",
      "KeyboardInterrupt\n"
     ]
    }
   ],
   "source": [
    "!python ./sample.py --out_file ./images/cifar10_original_ts1.png --module cifar10_u --time_scale 1 --checkpoint ./checkpoints/cifar10/original/checkpoint.pt --batch_size 128"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[NbConvertApp] Converting notebook cifar10_u_script.ipynb to script\n",
      "[NbConvertApp] Writing 3202 bytes to cifar10_u_script_converted.py\n"
     ]
    }
   ],
   "source": [
    "# export to script\n",
    "!jupyter nbconvert --to script cifar10_u_script.ipynb --output cifar10_u_script_converted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of parameters: 72732931\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "\n",
    "from Unets.unet_ddim import UNet\n",
    "\n",
    "#checkpoint = torch.load('./checkpoints/cifar10/original/checkpoint.pt')\n",
    "\n",
    "model = UNet( in_channel=3,\n",
    "        channel=128,\n",
    "        channel_multiplier=[1, 2, 2, 4],\n",
    "        n_res_blocks=2,\n",
    "        attn_strides=[8],\n",
    "    )\n",
    "\n",
    "\n",
    "#model.load_state_dict(checkpoint[\"G\"])\n",
    "#model.load_state_dict(checkpoint) # Adjust key if needed\n",
    "\n",
    "total_params = sum(p.numel() for p in model.parameters())\n",
    "print(f\"Total number of parameters: {total_params}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total trainable parameters: 290759171\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import torch\n",
    "from Unets.unet_final import UNet_final\n",
    "\n",
    "model = UNet_final(\n",
    "    in_channel=3,\n",
    "        channel=256,\n",
    "        channel_multiplier=[1, 2, 2, 4],\n",
    "        n_res_blocks=2,\n",
    "        attn_strides=[8],\n",
    "        k=1,)\n",
    "total_params = sum(p.numel() for p in model.parameters() )\n",
    "print(f\"Total trainable parameters: {total_params}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total trainable parameters: 60004099\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "from Unets.unet_torch import UNet\n",
    "\n",
    "model = UNet(\n",
    "     num_classes=1,\n",
    "     ch=256,\n",
    "     emb_ch=1024,\n",
    "     out_ch=3,  # e.g., RGB output\n",
    "     ch_mult=(1, 1, 1),\n",
    "     num_res_blocks=3,\n",
    "     attn_resolutions=(8, 16),\n",
    "     num_heads=1,\n",
    "     dropout=0.2,\n",
    "     logsnr_input_type=\"inv_cos\",\n",
    "     resblock_resample=True,\n",
    " )\n",
    "total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
    "print(f\"Total trainable parameters: {total_params}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "up_sample.2.temb_proj.weight torch.Size([512, 1024])\n",
      "up_sample.2.temb_proj.bias torch.Size([512])\n",
      "up_sample.2.norm2.weight torch.Size([256])\n",
      "up_sample.2.norm2.bias torch.Size([256])\n",
      "up_sample.2.conv2.weight torch.Size([256, 256, 3, 3])\n",
      "up_sample.2.conv2.bias torch.Size([256])\n",
      "norm_out.weight torch.Size([256])\n",
      "norm_out.bias torch.Size([256])\n",
      "conv_out.weight torch.Size([3, 256, 3, 3])\n",
      "conv_out.bias torch.Size([3])\n"
     ]
    }
   ],
   "source": [
    "from cifar10_u import make_model\n",
    "model = make_model()\n",
    "\n",
    "# Print all parameter names\n",
    "#for name, param in model.named_parameters():\n",
    "#    print(name, param.shape)\n",
    "\n",
    "# Or just check the last few\n",
    "for name, param in list(model.named_parameters())[-10:]:\n",
    "    print(name, param.shape)\n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "============================================================\n",
      "STEP 1: GENERATING IMAGES\n",
      "============================================================\n",
      "Using device: cuda\n",
      "Loading model...\n",
      "Loading checkpoint from ./checkpoints/cifar10/original/checkpoint.pt\n",
      "Model loaded. Timesteps: 1024, Time scale: 1\n",
      "Generating 20 images in 2 batches...\n",
      "Generating batches:  50%|████████████            | 1/2 [01:50<01:50, 110.17s/it]\n",
      "Generated 20 images in ./my_fid_images\n",
      "\n",
      "============================================================\n",
      "STEP 2: PREPARING REFERENCE STATISTICS\n",
      "============================================================\n",
      "cifar10-32x32.npz already exists.\n",
      "\n",
      "============================================================\n",
      "STEP 3: CALCULATING FID\n",
      "============================================================\n",
      "Loading dataset reference statistics from \"./cifar10-32x32.npz\"...\n",
      "Loading Inception-v3 model...\n",
      "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=Inception_V3_Weights.IMAGENET1K_V1`. You can also use `weights=Inception_V3_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Loading images from \"./my_fid_images\"...\n",
      "Calculating statistics for 20 images...\n",
      "Computing Inception features: 100%|████████████| 2/2 [00:00<00:00,  5.21batch/s]\n",
      "Calculating FID...\n",
      "\n",
      "============================================================\n",
      "RESULTS\n",
      "============================================================\n",
      "Generated images: ./my_fid_images\n",
      "Number of images: 20\n",
      "FID Score: 502.8546\n",
      "Results saved to: fid_results.txt\n",
      "============================================================\n"
     ]
    }
   ],
   "source": [
    "!python generate_and_calculate_fid.py \\\n",
    "    --checkpoint ./checkpoints/cifar10/original/checkpoint.pt \\\n",
    "    --output_dir ./my_fid_images \\\n",
    "    --num_images 20 \\\n",
    "    --batch_size 10 \\\n",
    "    --fid_batch_size 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
